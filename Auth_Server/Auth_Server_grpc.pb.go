// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: Auth_Server.proto

package Auth_Server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Req_PQClient is the client API for Req_PQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Req_PQClient interface {
	GetPQResponse(ctx context.Context, in *PQ_Request, opts ...grpc.CallOption) (*PQ_Response, error)
}

type req_PQClient struct {
	cc grpc.ClientConnInterface
}

func NewReq_PQClient(cc grpc.ClientConnInterface) Req_PQClient {
	return &req_PQClient{cc}
}

func (c *req_PQClient) GetPQResponse(ctx context.Context, in *PQ_Request, opts ...grpc.CallOption) (*PQ_Response, error) {
	out := new(PQ_Response)
	err := c.cc.Invoke(ctx, "/Req_PQ/GetPQResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Req_PQServer is the server API for Req_PQ service.
// All implementations must embed UnimplementedReq_PQServer
// for forward compatibility
type Req_PQServer interface {
	GetPQResponse(context.Context, *PQ_Request) (*PQ_Response, error)
	mustEmbedUnimplementedReq_PQServer()
}

// UnimplementedReq_PQServer must be embedded to have forward compatible implementations.
type UnimplementedReq_PQServer struct {
}

func (UnimplementedReq_PQServer) GetPQResponse(context.Context, *PQ_Request) (*PQ_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPQResponse not implemented")
}
func (UnimplementedReq_PQServer) mustEmbedUnimplementedReq_PQServer() {}

// UnsafeReq_PQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Req_PQServer will
// result in compilation errors.
type UnsafeReq_PQServer interface {
	mustEmbedUnimplementedReq_PQServer()
}

func RegisterReq_PQServer(s grpc.ServiceRegistrar, srv Req_PQServer) {
	s.RegisterService(&Req_PQ_ServiceDesc, srv)
}

func _Req_PQ_GetPQResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PQ_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Req_PQServer).GetPQResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Req_PQ/GetPQResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Req_PQServer).GetPQResponse(ctx, req.(*PQ_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Req_PQ_ServiceDesc is the grpc.ServiceDesc for Req_PQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Req_PQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Req_PQ",
	HandlerType: (*Req_PQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPQResponse",
			Handler:    _Req_PQ_GetPQResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Auth_Server.proto",
}

// Req_DH_ParamsClient is the client API for Req_DH_Params service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Req_DH_ParamsClient interface {
	GetDHResponse(ctx context.Context, in *DH_Request, opts ...grpc.CallOption) (*DH_Response, error)
}

type req_DH_ParamsClient struct {
	cc grpc.ClientConnInterface
}

func NewReq_DH_ParamsClient(cc grpc.ClientConnInterface) Req_DH_ParamsClient {
	return &req_DH_ParamsClient{cc}
}

func (c *req_DH_ParamsClient) GetDHResponse(ctx context.Context, in *DH_Request, opts ...grpc.CallOption) (*DH_Response, error) {
	out := new(DH_Response)
	err := c.cc.Invoke(ctx, "/Req_DH_Params/GetDHResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Req_DH_ParamsServer is the server API for Req_DH_Params service.
// All implementations must embed UnimplementedReq_DH_ParamsServer
// for forward compatibility
type Req_DH_ParamsServer interface {
	GetDHResponse(context.Context, *DH_Request) (*DH_Response, error)
	mustEmbedUnimplementedReq_DH_ParamsServer()
}

// UnimplementedReq_DH_ParamsServer must be embedded to have forward compatible implementations.
type UnimplementedReq_DH_ParamsServer struct {
}

func (UnimplementedReq_DH_ParamsServer) GetDHResponse(context.Context, *DH_Request) (*DH_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDHResponse not implemented")
}
func (UnimplementedReq_DH_ParamsServer) mustEmbedUnimplementedReq_DH_ParamsServer() {}

// UnsafeReq_DH_ParamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Req_DH_ParamsServer will
// result in compilation errors.
type UnsafeReq_DH_ParamsServer interface {
	mustEmbedUnimplementedReq_DH_ParamsServer()
}

func RegisterReq_DH_ParamsServer(s grpc.ServiceRegistrar, srv Req_DH_ParamsServer) {
	s.RegisterService(&Req_DH_Params_ServiceDesc, srv)
}

func _Req_DH_Params_GetDHResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DH_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Req_DH_ParamsServer).GetDHResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Req_DH_Params/GetDHResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Req_DH_ParamsServer).GetDHResponse(ctx, req.(*DH_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Req_DH_Params_ServiceDesc is the grpc.ServiceDesc for Req_DH_Params service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Req_DH_Params_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Req_DH_Params",
	HandlerType: (*Req_DH_ParamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDHResponse",
			Handler:    _Req_DH_Params_GetDHResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Auth_Server.proto",
}
